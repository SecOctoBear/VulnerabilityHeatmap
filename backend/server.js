import express from "express";
// const fs = require('fs');
import { normalize } from "./adapters/threadfix.js";
// import {normalize} from './adapters/kiuwan.js';

import axios from "axios";
import {
  THREADFIX_APIKEY,
  THREADFIX_BASEURL,
  KIUWAN_API_KEY,
} from "./config.js";
import data from "./adapters/threadfix_response.json" assert { type: "json" };
import path from "path";

const __dirname = path.resolve(path.dirname(""));
const app = express();
const port = process.env.PORT || 9876;

app.use("/", express.static(__dirname + "/"));

const env = process.env.NODE_ENV;

app.get("/api/kiuwan", function (req, res) {
  const axiosConfig = {
    mode: "no-cors",
    headers: {
      Authorization: "Basic " + KIUWAN_API_KEY,
    },
  };

  function fetchDataFromApi(callback) {
    // apps: https://api.kiuwan.com/applications
    // fetch scans in a range: https://api.kiuwan.com/analysis/list?applicationName=' + 'Taro-U-299'
    // fetch SAST GET /applications/analysis/vulnerabilities/export?application=
    // fetch SCA: GET /insights/analysis/security

    // TODO: entweder so und csv oder das TF format
    axios
      .get(
        "https://api.kiuwan.com/applications/analysis/vulnerabilities/export?application=Taro-U-299&code=A-7e5-17d74c5948c&type=Threadfix",
        axiosConfig,
      )
      .then(function (response) {
        callback(null, response.data);
      })
      .catch(function (error) {
        callback(error);
      });
  }

  console.log("fetching data..");

  fetchDataFromApi((error, data) => {
    if (error) {
      console.log("ERROR", error);

      res.writeHead(500, { "Content-Type": "text/plain" });
      res.end("An error occurred");
    } else {
      // Set the response header to indicate that the response will be in JSON format
      res.writeHead(200, { "Content-Type": "application/json" });

      // Send the JSON data as the response
      res.end(JSON.stringify(data));
    }
  });
});

/**
 * Just a basic listener at the root, serving normalized json data
 * to be used in the frontend to display the heatmap
 */
app.get("/api", function (req, res) {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Request-Method", "*");
  res.setHeader("Access-Control-Allow-Methods", "OPTIONS, GET");
  res.setHeader("Access-Control-Allow-Headers", "*");
  if (req.method === "OPTIONS") {
    res.writeHead(200);
    res.end();
    return;
  }

  const axiosConfig = {
    mode: "no-cors",
    headers: {
      Authorization: "APIKEY " + THREADFIX_APIKEY,
    },
  };

  function fetchDataFromApi(callback) {
    if (env === "production") {
      axios
        .get(THREADFIX_BASEURL + "rest/latest/applications", axiosConfig)
        .then(function (response) {
          callback(null, normalize(response.data));
        })
        .catch(function (error) {
          callback(error);
        });
    } else {
      callback(null, normalize(data));
    }
  }

  console.log("fetching data..");

  fetchDataFromApi((error, data) => {
    if (error) {
      console.log("ERROR", error);

      res.writeHead(500, { "Content-Type": "text/plain" });
      res.end("An error occurred");
    } else {
      // Set the response header to indicate that the response will be in JSON format
      res.writeHead(200, { "Content-Type": "application/json" });

      // Send the JSON data as the response
      res.end(JSON.stringify(data));
    }
  });
});

app.listen(port);
console.log("Server running at http://localhost:" + port + "/");
