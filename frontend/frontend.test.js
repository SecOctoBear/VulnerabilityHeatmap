import assert from "assert";
import moment from "moment";
import {
  isInCalendarWeek,
  getScansOfCalendarWeek,
  calculateColors,
} from "./helpers.js";

describe("#isInCalendarWeek()", function () {
  it("should return true if a given timestamp is inside the given calendar week and year", function () {
    // Timestamps from threadfix are X1000
    // fn "unix() from moment NOT"
    let ts = moment("2023-01-01 18:06:03").unix() * 1000;
    let calendarWeek = 1;

    assert.equal(isInCalendarWeek(ts, calendarWeek, 2023), true);

    ts = moment("2023-01-02 18:06:03").unix() * 1000;
    assert.equal(isInCalendarWeek(ts, calendarWeek, 2023), true);

    ts = moment("2023-01-07 18:06:03").unix() * 1000;
    assert.equal(isInCalendarWeek(ts, calendarWeek, 2023), true);

    ts = moment("2022-01-07 18:06:03").unix() * 1000;
    assert.equal(isInCalendarWeek(ts, calendarWeek, 2023), false);

    ts = moment("2023-01-07 18:06:03").unix() * 1000;
    assert.equal(isInCalendarWeek(ts, calendarWeek, 2022), false);

    calendarWeek = 2;
    ts = moment("2023-01-08 18:06:03").unix() * 1000;
    assert.equal(isInCalendarWeek(ts, calendarWeek, 2023), true);

    calendarWeek = 51;
    ts = moment("2023-12-22 18:06:03").unix() * 1000;
    assert.equal(isInCalendarWeek(ts, calendarWeek, 2023), true);

    calendarWeek = 52;
    ts = moment("2023-12-24 18:06:03").unix() * 1000;
    assert.equal(isInCalendarWeek(ts, calendarWeek, 2023), true);

    // See comment above the function ;)
    calendarWeek = 1;
    ts = moment("2023-12-31 11:06:03").unix() * 1000;
    assert.equal(isInCalendarWeek(ts, calendarWeek, 2023), true);
  });
});

describe("#getScansOfCalendarWeek()", function () {
  it("should return only the scans which are in a given calendar week and year", function () {
    const scans = [
      {
        importTime: moment("2023-01-03 18:06:03").unix() * 1000,
      },
      {
        importTime: moment("2023-01-04 18:06:03").unix() * 1000,
      },
      {
        importTime: moment("2022-01-04 18:06:03").unix() * 1000,
      },
    ];

    const scansFound = getScansOfCalendarWeek(scans, 1, 2023);

    assert.equal(scansFound.length, 2);
  });
});

// TODO: requirements should get into specs here!!!
// describe("#calculateColors()", function () {
//   it("should give green given there is a scan in the first week", function () {
//     const scans = [
//       {
//         importTime: moment("2023-01-03 18:06:03").unix() * 1000,
//       },
//       {
//         importTime: moment("2023-01-04 18:06:03").unix() * 1000,
//       },
//       {
//         importTime: moment("2022-01-04 18:06:03").unix() * 1000,
//       },
//     ];

//     const colors = calculateColors(scans);

//     assert.equal(colors.length, 2);
//   });
// });
